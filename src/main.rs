use futures_util::TryFutureExt;
use helix_lsp::{jsonrpc::Params, Call};
use rand::Rng;
use std::env;
use tree_sitter::{Query, QueryCursor};
use walkdir::WalkDir;

// code comments are good for documentation so this is a comment uwu
fn get_files() -> Vec<String> {
    let mut files: Vec<String> = Vec::new();

    for entry in WalkDir::new("./src/") {
        let entry = entry.unwrap();

        let path = entry.path().to_str().unwrap();

        if path.ends_with(".rs") {
            files.push(path.to_string());
        }
    }

    files
}

macro_rules! files {
    () => {
        WalkDir::new("./src/")
            .into_iter()
            .flatten()
            .filter_map(|f| {
                let path = f.path();
                if let Some(s) = path.to_str() {
                    if s.ends_with(".rs") {
                        Some(path)
                    } else {
                        None
                    }
                } else {
                    None
                }
            })
    };
}

// wow! such random! ඞ
fn random_chance() -> (bool, u8) {
    let mut rng = rand::thread_rng();

    // pretty random to me :)
    let random = 2;

    let imposter = rng.gen_range(1..=23);

    if random == 2 {
        (true, imposter)
    } else {
        (false, imposter)
    }
}

fn main() {
    let args: Vec<String> = env::args().collect();

    let mut usage = 1;

    let remm = "IAMTHEIMPOSTER".to_string();
    for i in args {
        if i == remm {
            usage = 2
        } else {
            usage = 1
        }
    }

    let mut imposters = 0;

    if usage == 1 {
        /*
        for i in files!() {
            let imp = populate_file(i.clone());
            imposters += imp;
        }
            */
        let mut parser = tree_sitter::Parser::new();
        parser.set_language(tree_sitter_rust::language()).unwrap();
        let query = Query::new(tree_sitter_rust::language(), include!("query.scm"));
        let mut cursor = QueryCursor::new();

        tokio::runtime::Builder::new_current_thread()
            .enable_all()
            .build()
            .unwrap()
            .block_on(async move {
                let (lsp, mut incoming, initialize_notify) =
                    helix_lsp::Client::start("rust-analyzer", &[], None, &[], 0, 60, None).unwrap();

                lsp.capabilities
                    .get_or_try_init(|| lsp.initialize().map_ok(|response| response.capabilities))
                    .await;

                lsp.notify::<helix_lsp::lsp::notification::Initialized>(
                    helix_lsp::lsp::InitializedParams {},
                )
                .await
                .unwrap();

                initialize_notify.notify_one();

                while let Some(rx) = incoming.recv().await {
                    if let Call::Notification(n) = rx.1 {
                        match n.params {
                            Params::Map(m) => {
                                if let Some(m) = dbg!(m).values().nth(1) {
                                    if let Some(o) = m.as_object() {
                                        if let Some(o) = o.values().next() {
                                            if let Some(s) = o.as_str() {
                                                if s == "end" {
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            _ => {}
                        }
                    }
                }

                for i in files!() {}
            });

        println!("found {imposters} imposters in your code");
    } else {
        /*
        for i in files!() {
            loop {
                let imp = remove_imposters(i.clone());

                if imp == 0 {
                    break;
                }
            }
        }
            */

        println!("eliminated all imposters from your sus code. it was a clean job");
    }
}

// OMG another comment!!!
fn populate_file(path: String) -> u32 {
    let old_data = std::fs::read_to_string(&path).unwrap();
    let new_data: &mut Vec<u8> = &mut Vec::new();

    let mut imposters = 0;

    for (index, character) in old_data.as_bytes().iter().enumerate() {
        new_data.push(*character);

        if character.to_ascii_lowercase() == 10 {
            if old_data.len() > index + 2 {
                if old_data.as_bytes()[index + 1] == 47 || old_data.as_bytes()[index + 2] == 47 {
                    continue;
                }
            } else if old_data.len() > index {
                let (chance, imposter) = random_chance();

                if chance {
                    imposters += 1;

                    add_imposter(new_data, imposter);
                }
            }
        } else {
            //
        }
    }

    std::fs::write(&path, new_data).unwrap();

    imposters
}

// ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ ඞ
fn remove_imposters(path: String) -> u32 {
    let mut deleting: bool = false;

    let mut imposters = 0;

    let old_data = std::fs::read_to_string(&path).unwrap();
    let new_data: &mut Vec<u8> = &mut Vec::new();

    for (index, character) in old_data.as_bytes().iter().enumerate() {
        if index > 5 {
            if old_data.len() > index + 4 {
                if old_data.as_bytes()[index + 1] == b'/'
                    && old_data.as_bytes()[index + 2] == b'/'
                    && old_data.as_bytes()[index + 3] == b'.'
                    && old_data.as_bytes()[index + 4] == b'?'
                {
                    imposters += 1;
                    deleting = true;
                }
            }

            if old_data.as_bytes()[index - 5] == b'/'
                && old_data.as_bytes()[index - 4] == b'/'
                && old_data.as_bytes()[index - 3] == b'?'
                && old_data.as_bytes()[index - 2] == b'.'
                && old_data.as_bytes()[index - 1] == b'\n'
            {
                deleting = false;
            }
        }

        if !deleting {
            new_data.push(*character);
        }
    }

    std::fs::write(&path, new_data).unwrap();
    imposters
}

// now the fun part!!! ඞ
fn add_imposter(new_data: &mut Vec<u8>, id: u8) {
    let imposter = match id {
        1 => {
            r#"
//.?
//
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇⠀⠀⠀
//⠀⠀⠀⢀⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠈⣿⣿⣿⡀⠀⠀
//⠀⠀⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⡇⠀⠀
//⠀⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁⠀⠀
//⠀⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃⠀⠀⠀
//⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀
//⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿⠀⠀⠀⠀⠀⠀
//⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀⠀⠀
//⠀⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇⠀⠀
//⠀⠀⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀⠀⣠⣾⣿⣿⡇⠀⠀
//⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠉⠻⢿⣿⣿⣿⣿⣿⣿⠿⠋⠉⠛⠋⠉⠉⠁
//           ⠉⠉⠉⠁
//?.
"#
        }

        2 => {
            r#"
//.? ⠀
//      ⠀⠀⠀⠀⠀⢀⣀⣀⣴⣆⣠⣤⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣻⣿⣯⣘⠹⣧⣤⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠿⢿⣿⣷⣾⣯⠉⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⠜⣿⡍⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⠁⠀⠘⣿⣆⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⡟⠃⡄⠀⠘⢿⣆⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣁⣋⣈ ⣤⣮⣿⣧⡀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀
//⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣷⠀
//⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀
//⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀
//⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀
//⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
//⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀
//⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀
//⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//?.
"#
        }

        3 => {
            r#"
//.?
//             ⣠⣤⣤⣤⣤⣤⣶⣦⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣿⡿⠛⠉⠙⠛⠛⠛⠛⠻⢿⣿⣷⣤⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀
//⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆🔴⠀⠀⠀⠀🔴⠀⠀⣿⣷⠀
//⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀
//⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀
//⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀
//⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀
//⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀
//⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀
//⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//?.
"#
        }

        4 => {
            r#"
//.?
//⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⠄⠄⣀⣀⣐⡀⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⢠⠄⣠⣶⣿⣿⣿⠿⠿⣛⣂⣀⣀⡒⠶⣶⣤⣤⣬⣀⡀⠄⢀⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⢀⣾⣿⣿⣿⡟⢡⢾⣿⣿⣿⣿⣿⣿⣶⣌⠻⣿⣿⣿⣿⣷⣦⣄⡀⠄⠄⠄⠄⠄
//⠄⠄⣈⣉⡛⣿⣿⣿⡌⢇⢻⣿⣿⣿⣿⣿⠿⠛⣡⣿⣿⣿⣿⣿⣿⣿⣿⣦⣄⠄⠄⠄
//⠄⠺⠟⣉⣴⡿⠛⣩⣾⣎⠳⠿⠛⣋⣩⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠄⠄
//⠄⠄⠄⠘⢋⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠄
//⠄⠄⢀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄
//⠄⠄⠄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⣀
//⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠘⠛
//⠄⠄⠄⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠋⣀⣀⣠⣤
//⠄⠄⣀⣀⡙⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⢛⣩⠤⠾⠄⠛⠋⠉⢉
//⠄⠺⠿⠛⠛⠃⠄⠉⠙⠛⠛⠻⠿⠿⠿⠟⠛⠛⠛⠉⠁⠄⠄⣀⣀⣠⣤⣠⣴⣶⣼⣿
//?.
"#
        }

        5 => {
            r#"
//.?
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟥🟥
//🟥🟥🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟥🟥
//🟥🟥🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟥🟥
//🟥🟥🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟦🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥 ‎   ‎🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥 ‎ ‎  🟥🟥🟥🟥🟥🟥 
//?.
"#
        }

        // THICCCCCCC!!!!!!!
        6 => {
            r#"
//.?
//⣿⣿⣿⣿⣿⣿⣿⢿⠟⠛⠿⠻⠿⠿⠟⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⡿⠛⢙⣨⣥⣶⣶⣿⢿⣿⣿⣷⣦⣅⠛⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⠟⢀⡴⠟⠋⢉⣀⣠⣤⣤⣤⣀⠉⠻⣿⣧⡈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⠀⠁⣠⣴⣾⣿⣿⣿⣿⣿⣿⣿⣷⠀⢻⣿⣇⠝⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⠀⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⡀⣼⡿⠟⠀⠙⣛⣬⠱⣿⣿⣿⣿⣿⣿
//⣿⣿⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⠿⠋⢀⠄⠁⣠⣶⣾⣿⣿⣿⡆⣼⣿⣿⣿⣿⣿
//⣿⣿⠀⣀⠙⣛⣛⣻⠛⠋⣉⣢⣤⣾⠃⣰⡄⠸⣿⣿⣿⣿⣿⣷⠘⣿⣿⣿⣿⣿
//⣿⣿⣤⢹⣷⣶⣶⣶⣾⣿⣿⣿⣿⣿⡄⠸⣷⠀⢻⣿⣿⡿⠟⠛⠡⣿⣿⣿⣿⣿
//⣿⣿⣿⠄⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠄⠻⠇⢈⠁⠀⠀⠲⠠⠞⠿⣿⣿⣿⣿
//⣿⣿⣿⣷⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⢤⠀⠀⢲⣿⣿⣿⣷⣤⡉⣻⣿⣿
//⣿⣿⣿⣿⣧⠈⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣳⡀⢻⣿⣿⣿⣿⣷⠐⣿⣿
//⣿⣿⣿⣿⣿⣯⡈⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⡇⡆⣿⣿⣿⣿⡟⣀⣿⣿
//⣿⣿⣿⣿⣿⣿⣷⡀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⢃⡿⠿⠛⡋⣀⣾⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⣷⣀⠹⣿⣿⣿⣿⣿⣿⣿⠿⠋⢁⣠⣿⡦⠐⠀⢈⡙⢿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⣿⠋⢀⣿⣿⣿⣿⠟⢃⣤⣤⡀⠻⣿⣇⣠⣴⡿⠄⠹⣧⡸⣿
//⣿⣿⣿⣿⣿⣿⡿⠃⢠⣾⣿⣿⡿⢋⣤⣿⣿⣿⣿⣄⠈⢿⡿⠋⣠⣤⣀⠈⣡⣿
//⣿⣿⣿⠅⣀⣈⠁⣰⣿⣿⡿⠋⣤⣾⣿⣿⣿⣿⣿⣿⣷⣵⣂⣽⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⣄⠘⢿⣿⣿⠟⠋⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣷⣤⣬⣅⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//?.
"#
        }

        7 => {
            r#"
//.?
//⠄⠄⠄⠄⠄⠄⠄⠄⠄⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣶⣄⠄⠄⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⠄⠄⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⠄⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⣴⡿⠛⠉⠁⠄⠄⠄⠄⠈⢻⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⢸⣿⡅⠄⠄⠄⠄⠄⠄⠄⣠⣾⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣦⠄⠄⠄
//⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣇⠄⠄
//⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄
//⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄
//⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄
//⠄⠄⠄⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄
//⠄⠄⠄⠄⠄⠘⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄
//⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠛⠛⠛⠃⠄⠄
//⠄⠄⠄⠄⠄⣼⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⢰⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄
//⠄⠄⠄⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄
//⠄⠄⠄⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠄⠄⠄⠄
//⠄⠄⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠄⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠇⠄⠄⠄⠄
//⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⡿⠟⠁⠄⠄⠄⠻⣿⣿⣿⣿⣿⣿⣿⡿⠄⠄⠄⠄⠄
//⠄⠄⢸⣿⣿⣿⣿⣿⡿⠋⠄⠄⠄⠄⠄⠄⠄⠙⣿⣿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄
//⠄⠄⢸⣿⣿⣿⣿⣿⣧⡀⠄⠄⠄⠄⠄⠄⠄⢀⣾⣿⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄
//⠄⠄⢸⣿⣿⣿⣿⣿⣿⣿⡄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⣿⣿⣿⣷⠄⠄⠄⠄⠄
//⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⣷⠄⠄⠄⠄⠄⢰⣿⣿⣿⣿⣿⣿⣿⣿⠄⠄⠄⠄⠄
//⠄⠄⠄⢿⣿⣿⣿⣿⣿⣿⡟⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⠏⠄⠄⠄⠄⠄
//⠄⠄⠄⠈⢿⣿⣿⣿⣿⠏⠄⠄⠄⠄⠄⠄⠄⠙⣿⣿⣿⣿⣿⠏⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠘⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄⠄⣿⣿⣿⣿⡏⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⢸⣿⣿⣿⣧⠄⠄⠄⠄⠄⠄⠄⢀⣿⣿⣿⣿⡇⠄⠄⠄⠄⠄⠄⠄
//⠄⠄⠄⠄⠄⣸⣿⣿⣿⣿⣆⠄⠄⠄⠄⠄⢀⣾⣿⣿⣿⣿⣿⣄⠄⠄⠄⠄⠄⠄
//⠄⣀⣀⣤⣾⣿⣿⣿⣿⡿⠟⠄⠄⠄⠄⠄⠸⣿⣿⣿⣿⣿⣿⣿⣷⣄⣀⠄⠄⠄
//⠸⠿⠿⠿⠿⠿⠿⠟⠁⠄⠄⠄⠄⠄⠄⠄⠄⠄⠉⠉⠛⠿⢿⡿⠿⠿⠿⠃⠄⠄
//?.
"#
        }

        // THIICCCCCCCC!!!!
        8 => {
            r#"
//.?            
//⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⣻⣯⣽⣟⠿⠟⠛⠛⠻⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⡿⣫⣾⣿⣿⣿⡹⢁⣴⣷⣿⣿⣷⣆⣤⡀⠠⢬⣉⠻⣿⣿⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⢱⣿⣿⣿⠿⠩⢠⣿⣿⣿⣿⣿⣏⣿⢸⣿⡖⣄⠹⣷⡌⢿⣿⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⡸⣿⣿⣿⣼⠂⢸⣿⣿⣾⠯⢟⠋⠿⣿⡿⣳⡿⣳⣿⣷⡈⢿⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⣷⣌⡻⣿⢡⣿⡀⢻⣿⣿⣷⣭⣯⡆⢰⣤⣥⣶⣿⣿⣿⣷⠈⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢃⣿⣿⣿⣤⡈⠛⠛⠙⠛⠁⣸⣿⣿⣿⣿⣿⡿⠉⣤⣤⡉⢻⣿⣿
//⣿⣿⣿⣿⣿⠿⠛⢋⣉⣁⣈⣉⣀⣈⣉⣉⣉⣁⡐⠚⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⡀⢿⣿
//⣿⣿⣿⠏⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠈⢿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⡇⢸⣿
//⣿⣿⣿⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⢸⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⡇⢸⣿
//⣿⣿⡟⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⠇⣸⣿
//⣿⣿⣧⠈⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣸⣿⣿⣿⣿⣿⣧⡈⠛⠿⠋⢠⣿⣿
//⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇⢰⣾⣿⣿⣿
//⣿⣿⣿⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿
//⣿⣿⣿⣆⠘⠿⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠋⠀⣰⣿⣿⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿
//⣿⣿⣿⠋⣠⣶⣶⣶⣶⣶⣶⠂⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⣿⣿⣿⣿
//⣿⣿⠃⣰⣿⣿⣿⣿⣿⣿⡇⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣧⠀⣿⣿⣿⣿
//⣿⡏⠀⣿⣿⣿⣿⣿⣿⣿⡇⠸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣿⣿⣿⣿
//⣿⣇⠀⣿⣿⣿⣿⣿⣿⣿⣧⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⣸⣿⣿⣿
//⣿⣿⡀⢻⣿⣿⣿⣿⣿⣿⣿⣆⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⢸⣿⣿⣿
//⣿⣿⣷⣄⠙⠿⣿⣿⣿⣿⣿⣿⣷⣄⠈⠛⠻⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⣸⣿⣿⣿
//⣿⣿⣿⣿⣷⡄⢀⣉⣩⣿⣿⣿⠋⢠⣄⣀⣀⣀⣀⡀⢶⣿⣿⣿⣿⣿⣿⣿⣿⡏⢁⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣧⠈⣿⣿⣿⣿⣿⠀⣼⣿⣿⣿⣿⣿⣷⡈⠻⣿⣿⣿⣿⣿⣿⡿⢁⣼⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣆⠘⣿⣿⡿⠃⣰⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠉⠛⠻⠿⠏⣠⣾⣿⣿⣿⣿⣿
//⣿⣿⣿⣿⣿⣿⣿⣦⣈⠉⢀⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿
//?.
"#
        }

        9 => {
            r#"
//.?
//⬜⬜⬜🟥🟥🟥🟥🟥🟥⬜⬜⬜
//⬜⬜🟥🟥🟥🟥🟥🟥🟥🟥⬜⬜
//⬜🟥🟥🟦🟦🟦🟦🟦🟦🟥🟥⬜
//⬜🟥🟦🟦🟦🟦🟦🟦🟦🟦🟥⬜
//⬜🟥🟥🟦🟦🟦🟦🟦🟦🟥🟥⬜
//⬜🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//⬜🟥🟥🟥⬜⬜⬜⬜🟥🟥🟥⬜
//?.
"#
        }

        10 => {
            r#"
//.?
//➖➖🟥🟥🟥
//➖🟥🟥🟥🟥🟥
//🟥🟥🟥🟦🟦🟦
//🟥🟥🟥🟦🟦🟦
//🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥
//➖🟥🟥🟥🟥🟥
//➖🟥🟥➖🟥🟥
//➖🟥🟥➖🟥🟥
//?.
"#
        }

        11 => {
            r#"
//.?⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣶⣿⣿⣷⣶⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣾⣿⣿⡿⢿⣿⣿⣿⣿⣿⣿⣿⣷⣦⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⡟⠁⣰⣿⣿⣿⡿⠿⠻⠿⣿⣿⣿⣿⣧⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⠏⠀⣴⣿⣿⣿⠉⠀⠀⠀⠀⠀⠈⢻⣿⣿⣇⠀⠀⠀
//⠀⠀⠀⠀⢀⣠⣼⣿⣿⡏⠀⢠⣿⣿⣿⠇⠀⠀⠀     ⣿⣿⣿⡀⠀⠀
//⠀⠀⠀⣰⣿⣿⣿⣿⣿⡇⠀⢸⣿⣿⣿⡀⠀⠀⠀     ⣿⣿⣿⡇⠀⠀
//⠀⠀⢰⣿⣿⡿⣿⣿⣿⡇⠀⠘⣿⣿⣿⣧⠀⠀⠀⠀⠀⠀⢀⣸⣿⣿⣿⠁⠀⠀
//⠀⠀⣿⣿⣿⠁⣿⣿⣿⡇⠀⠀⠻⣿⣿⣿⣷⣶⣶⣶⣶⣶⣿⣿⣿⣿⠃⠀⠀⠀
//⠀⢰⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⠟⠁⠀⠀⠀⠀
//⠀⢸⣿⣿⡇⠀⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠉⠛⠛⠛⠉⢉⣿⣿⠀⠀⠀⠀⠀⠀
//⠀⢸⣿⣿⣇⠀⣿⣿⣿⠀⠀⠀⠀⠀⢀⣤⣤⣤⡀⠀⠀⢸⣿⣿⣿⣷⣦⠀⠀⠀
//⠀⠀⢻⣿⣿⣶⣿⣿⣿⠀⠀⠀⠀⠀⠈⠻⣿⣿⣿⣦⡀⠀⠉⠉⠻⣿⣿⡇⠀⠀
//⠀⠀⠀⠛⠿⣿⣿⣿⣿⣷⣤⡀⠀⠀⠀⠀⠈⠹⣿⣿⣇⣀⠀⣠⣾⣿⣿⡇⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠹⣿⣿⣿⣿⣦⣤⣤⣤⣤⣾⣿⣿⣿⣿⣿⣿⣿⣿⡟⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⠋⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⠈⢻⣿⣿⡄⠀⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⣸⣿⡏⠀⠀⠀⣠⣶⣾⣿⣿⣿⠿⠿⠿⢿⣿⣿⣿⣄⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠁⠀⠀⢰⣿⣿⣯⠁⠀⠀⠀⠀⠀⠀⠀⠈⠙⢿⣷⡄⠀ 
//⠀⠀⣀⣤⣴⣶⣶⣿⡟⠀⠀⠀⢸⣿⣿⣿⣆⠀⠀⠀⠀     ⠀⣿⣷⠀ 
//⠀⢰⣿⡟⠋⠉⣹⣿⡇⠀⠀⠀⠘⣿⣿⣿⣿⣷⣦⣤⣤⣤⣶⣶⣶⣶⣿⣿⣿⠀ 
//⠀⢸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠹⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠃⠀ 
//⠀⣸⣿⡇⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠉⠻⠿⣿⣿⣿⣿⡿⠿⠿⠛⢻⣿⡇⠀⠀ 
//⠀⣿⣿⠁⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣧⠀⠀ 
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ 
//⠀⣿⣿⠀⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⠀⠀ 
//⠀⢿⣿⡆⠀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⡇⠀⠀ 
//⠀⠸⣿⣧⡀⠀⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⠃⠀⠀ 
//⠀⠀⠛⢿⣿⣿⣿⣿⣇⠀⠀⠀⠀⠀⣰⣿⣿⣷⣶⣶⣶⣶⠶⠀⢠⣿⣿⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⣽⣿⡏⠁⠀⠀⢸⣿⡇⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⣿⣿⠀⠀⠀⠀⠀⣿⣿⡇⠀⢹⣿⡆⠀⠀⠀⣸⣿⠇⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⢿⣿⣦⣄⣀⣠⣴⣿⣿⠁⠀⠈⠻⣿⣿⣿⣿⡿⠏⠀⠀⠀⠀ 
//⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⠿⠿⠿⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//?.
"#
        }

        12 => {
            r#"
//.?
//⬜️⬜️🟥🟥🟥⬜️⬜️
//⬜️🟥🟥🟥🟥🟥⬜️
//🟥🟥⬛️⬛️⬛️🟥⬜️
//🟥🟥🟥🟥🟥🟥⬜️
//🟥🟥🟥🟥🟥🟥⬜️
//⬜️🟥🟥⬜️🟥🟥⬜️
//⬜️🟥🟥⬜️🟥🟥⬜️      
//?.
"#
        }

        13 => {
            r#"
//.?
//⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜
//⬜⬜⬛🟫🟫🟫⬛⬜⬜⬜⬛🟫🟫🟫⬛⬜
//⬜⬜⬛🟫🟧🟧⬛⬜⬜⬜⬛🟧🟧🟫⬛⬜
//⬜⬜⬛🟫🟧⬛⬛⬛⬛⬛⬛⬛🟧🟫⬛⬜
//⬜⬜⬜⬛⬛🟫🟫🟫🟫🟫🟫🟫⬛⬛⬜⬜
//⬜⬜⬜⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬜⬜⬜⬛🟫🟫🟫🟫⬛⬛⬛⬛⬛⬛⬜⬜
//⬜⬜⬜⬛🟫🟫🟫⬛🟦🟦⬜⬜⬜⬜⬛⬜
//⬜⬛⬛⬛🟫🟫⬛🟦🟦🟦⬜⬜⬜⬜🟦⬛
//⬛🟫🟫⬛🟫🟫⬛🟦🟦🟦🟦🟦🟦🟦🟦⬛
//⬛🟫🟫⬛🟫🟫⬛🟦🟦🟦🟦🟦🟦🟦🟦⬛
//⬛🟫🟫⬛🟫🟫🟫⬛🟦🟦🟦🟦🟦🟦⬛⬜
//⬛🟫🟫⬛🟫🟫🟫🟫⬛⬛⬛⬛⬛⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬛🟫🟫⬛🟫🟫🟫🟫🟫🟫🟫🟫🟫⬛⬜⬜
//⬜⬛⬛⬛🟫🟫🟫⬛⬛⬛⬛🟫🟫⬛⬜⬜
//⬜⬜⬜⬛🟫🟫🟫⬛⬜⬛🟫🟫🟫⬛⬜⬜
//⬜⬜⬜⬛🟫🟫🟫⬛⬜⬛🟫🟫🟫⬛⬜⬜
//⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬛⬛⬛⬜⬜⬜      
//?.
"#
        }

        14 => {
            r#"
//.?
//⬜⬜⬜⬜🟥🟥🟥⬜⬜⬜⬜   🟥🟥🟥                                     🟥🟥🟥
//⬜⬜⬜🟥🟥🟥🟥🟥⬜⬜⬜ 🟥                                         🟥
//⬜⬜🟥🟥🟥🟥⬛⬛⬛⬜⬜ 🟥                  🟥          🟥         🟥
//🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬜ 🟥                  🟥          🟥         🟥
//🟥🟥🟥🟥🟥🟥⬛⬛⬛⬜⬜   🟥🟥🟥            🟥          🟥           🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥⬜⬜         🟥          🟥          🟥                 🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥⬜⬜         🟥          🟥          🟥                 🟥
//⬜⬜🟥🟥🟥🟥🟥🟥🟥⬜⬜         🟥            🟥      🟥                   🟥
//⬜⬜🟥🟥🟥🟥🟥🟥🟥⬜⬜   🟥🟥🟥                🟥🟥🟥               🟥🟥🟥
//⬜⬜🟥🟥🟥⬜🟥🟥🟥⬜⬜
//⬜⬜🟥🟥🟥⬜🟥🟥🟥⬜⬜
//?.
"#
        }

        15 => {
            r#"
//.?
//⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
//⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬛⬛⬛⬜⬛⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬛⬜⬜⬜⬛⬜⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬛⬛⬛⬜⬛⬜⬛⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬜⬜⬛⬜⬛⬜⬛⬜⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬛⬛⬛⬜⬛⬛⬛⬜⬛⬛⬛⬜⬛⬜⬛⬜⬛⬜⬛
//⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛
//⬛⬜⬜⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛
//⬛⬜⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
//⬛⬜⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
//⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
//⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜       
//?.
"#
        }

        16 => {
            r#"
//.?
//⚪⚪⚪⚪🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴🔴🔴🔴🔴🔵🔵🔵🔵🔵⚪⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔵🔵🔵🔵⚪⚪🔵⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔵🔵🔵🔵🔵🔵🔵⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴🔵🔵🔵🔵🔵⚪⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴🔴🔴🔴🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴⚪⚪⚪🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴⚪⚪⚪🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪
//⚪⚪⚪🔴🔴🔴⚪⚪⚪🔴🔴🔴⚪⚪⚪⚪⚪⚪⚪      
//?.
"#
        }

        17 => {
            r#"
//.?
//                ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣶⣶⣦⣤⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣴⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣦⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⢿⣟⡿⣿⢿⡿⣿⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⣾⣿⣿⣿⣿⣿⣿⣿⣻⣽⡾⣽⣯⢿⣾⣻⣽⣯⢿⣽⣯⢿⣳⣟⣾⡽⣯⣟⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⣿⣿⣿⣿⣿⣿⣟⡷⣯⣷⢯⣟⡿⣞⣿⣳⣯⣷⣻⣟⣾⣽⣻⣟⣾⣽⣻⢷⣻⣽⡷⣯⢿⣽⢿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⣿⣿⣿⣿⣿⣟⡷⣯⢿⣻⢾⣟⣯⢿⣻⢷⣯⡷⣯⣷⢿⣽⢾⡷⣯⣟⣾⢯⡿⣯⡷⣟⣿⣻⢾⣯⡷⣿⣻⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣼⣿⣿⣿⣿⣿⣿⣻⣞⣿⡽⣟⣯⣿⢾⣯⢿⣯⢿⡾⣽⣟⡾⣟⣾⢿⣽⣻⢾⣯⣟⣿⣳⣿⣻⢷⣻⣯⡷⣟⣯⣷⣟⡿⣿⣿⣿⣿⣿⣷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣟⡾⣷⣻⣾⣻⢯⣟⣾⣟⣾⣟⣾⢿⣽⣟⡾⣟⣯⣟⡿⣞⣿⣻⢾⣽⣾⣻⢾⣽⣻⣟⣾⡽⣿⡽⣾⣽⣻⣽⢿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣟⡾⣿⡽⣷⢯⣟⡿⣽⣾⣻⢾⣽⡾⣟⣾⣽⣻⢯⣟⣾⣟⣯⣷⢿⣯⣷⣯⣟⣯⣟⣷⣯⣷⣿⣯⣟⣷⣯⣟⣾⣿⡽⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⣟⡾⣟⣷⢿⣯⣟⣯⣿⣻⢾⣽⣯⡷⣟⣿⣽⣞⣿⣯⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣟⡾⣟⣯⣟⡿⣾⣽⣳⣯⣟⡿⣞⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣄⡀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣟⡾⣟⣯⢿⣞⣿⣳⣯⣟⣾⣽⣻⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠛⠛⠋⠉⠉⠉⠉⠉⠉⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠙⠛⠿⠿⣿⣿⣿⣿⣿⣿⣶⣄⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⡿⣞⣿⢯⣟⣯⡿⣾⣽⣳⣯⣟⣾⣿⣿⣿⣿⣿⣿⣏⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠄⠒⠀⠀⠀⠀⠀⠀⠀⠀⠀⠒⠠⠄⢀⡀⠀⠈⠙⠻⣿⣿⣿⣿⣿⣧⡀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⣿⣿⣿⣿⣿⣻⢯⣟⣯⣿⣳⡿⣽⡾⣯⡷⣿⣿⣿⣿⣿⣿⣛⢶⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠊⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠑⠠⡀⠀⠈⠙⣿⣿⣿⣿⣿⡄⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⣿⣿⣿⣿⣿⣯⣟⡿⣽⣳⣯⡷⣿⢯⣟⣷⢿⣿⣿⣿⣿⣿⡳⣝⡮⡽⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢆⠀⠀⠈⢻⣿⣿⣿⣿⡀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣾⣿⣿⣿⣿⣿⢾⣽⣻⢯⣟⣾⣽⣟⣯⡿⣾⢿⣿⣿⣿⣿⡿⣵⢫⣞⡵⣻⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠁⠢⢄⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡸⠀⠀⠀⠈⣿⣿⣿⣿⣧⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣀⣸⣿⣿⣿⣿⣿⣯⢿⣳⣿⣻⡽⣷⣻⡾⣽⣻⣽⣿⣿⣿⣿⣿⡿⣜⣳⢎⡷⣝⣷⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠁⠐⠠⠄⢀⡀⠀⠀⠀⠀⠀⠀⣀⠀⠤⠊⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⡄
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣀⣠⣤⣴⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢾⣻⣟⣾⣽⣻⣽⢷⣟⡿⣽⣞⣿⣿⣿⣿⣿⡿⣜⢧⡻⣜⡳⣞⢷⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠁⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⡇
//⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣟⡿⣾⣽⣞⣯⣟⡿⣾⣻⣽⡾⣿⣿⣿⣿⣿⣿⡹⢮⣝⢧⡟⣼⢫⡽⣆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣶⣿⣿⣿⣿⣿
//⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⢿⣿⣿⣿⣿⣿⣿⣳⡿⣽⣷⣻⢾⣻⢾⣻⡷⣟⡷⣿⣽⣿⣿⣿⣿⣿⣝⡳⢮⣳⠽⣎⠿⣼⡹⢷⣦⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣤⢶⡞⣯⢳⢧⣿⣿⣿⣿⣿
//⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⡿⣟⡿⣽⣯⢷⣯⢿⣽⣻⣿⣿⣿⣿⣿⣟⡷⣿⣻⢾⣽⣟⣯⡿⣷⣟⡿⣽⡷⣯⣿⣿⣿⣿⣿⣾⣹⢳⣭⣛⢾⡹⣖⢯⣳⢎⡟⣿⢲⡶⢶⢶⣤⣤⣤⡤⣤⣄⡤⣤⢤⡤⣤⢤⡖⣶⢲⡖⣿⢻⡽⣹⢎⡷⣹⢞⡽⢮⣿⣿⣿⣿⡏
//⠀⠀⠀⣼⣿⣿⣿⣿⣿⢯⣟⡿⣽⣟⡾⣿⡽⣯⡿⣽⣿⣿⣿⣿⣿⣯⢿⣷⣻⣯⣷⢯⡿⣽⡷⣯⢿⣯⣟⣷⢿⣿⣿⣿⣿⣿⣮⢗⡮⣝⡮⢷⣹⢎⡷⣫⢾⡱⣏⠾⣝⠾⣜⡶⣣⢟⡶⣹⢞⡵⣫⢞⡵⣫⢾⡱⣏⡾⣱⣏⠾⣵⢻⡜⣯⢞⡽⣻⣿⣿⣿⣿⠇
//⠀⠀⢰⣿⣿⣿⣿⣿⣯⢿⣯⣟⡿⣞⣿⣳⡿⣯⣟⣿⣿⣿⣿⣿⣿⢯⣿⣞⣷⣟⡾⣿⡽⣷⣟⣿⣻⢾⣽⣾⣻⢿⣿⣿⣿⣿⣿⣿⣼⢣⡟⣧⣛⢮⢷⡹⣎⢷⣫⢟⣮⢻⡵⣫⢗⡯⣞⡵⣫⡞⣵⣛⢾⡱⣏⢷⡹⣞⡵⣚⠿⣜⣧⢻⡜⣯⣾⣿⣿⣿⣿⡟⠀
//⠀⠀⣾⣿⣿⣿⣿⡿⣽⣻⡾⣽⣻⣯⡷⣿⡽⣷⣻⢿⣿⣿⣿⣿⣿⢯⣷⢿⡾⣽⣻⢷⣟⡿⣞⣷⢿⣯⡷⣯⣟⣯⣿⣿⣿⣿⣿⣿⣿⣿⣾⣵⣫⡞⣧⢻⡝⣮⢳⣏⡞⣧⢻⡵⣫⢞⡵⣫⢷⡹⢮⣝⡮⣽⢺⣭⢳⡝⡾⣭⣛⠾⣜⡧⣟⣿⣿⣿⣿⣿⡟⠀⠀
//⠀⢰⣿⣿⣿⣿⣿⣟⣯⣷⢿⣻⢷⣯⢿⣳⡿⣯⣟⣿⣿⣿⣿⣿⡿⣯⣟⣯⣿⣻⡽⣿⣞⡿⣯⣟⡿⣾⡽⣟⣾⣻⢾⡽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣼⣷⣮⣝⣞⣧⡻⣵⢫⢾⡱⢯⣝⡳⢮⣳⢭⡗⣮⢻⣼⣳⣧⣯⣿⣾⣿⣿⣿⣿⣿⣿⠋⠀⠀⠀
//⠀⣸⣿⣿⣿⣿⣿⣞⡿⣾⣻⢯⣿⢾⣟⣯⢿⣷⣻⣿⣿⣿⣿⣿⣿⣽⢾⣻⡾⣽⣻⢷⣻⣽⣟⡾⣟⣷⢿⣻⢷⣻⣯⢿⣳⣯⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀
//⠀⣿⣿⣿⣿⣿⣟⣾⣟⡷⣿⣻⡽⣟⣾⢯⣿⣞⡿⣿⣿⣿⣿⣿⡷⣯⡿⣯⣟⡿⣽⣻⢯⣷⣻⣽⢿⣾⣻⢯⣿⣻⢾⣟⣯⣟⣯⡿⣯⣟⡿⣿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
//⢰⣿⣿⣿⣿⣿⣟⣾⣽⣻⢷⣟⡿⣯⣟⣯⣷⣟⣿⣿⣿⣿⣿⣿⣟⡷⣿⡽⣯⣟⡿⣽⣻⢷⣻⡽⣟⣾⡽⣟⣷⣻⣟⣾⣻⡾⣽⣻⢷⣻⣽⢯⣿⢾⡽⣯⣟⣿⣻⣟⡿⣿⢿⡿⣿⢿⡿⣿⣿⣿⣿⣿⣿⣿⣿⢿⡿⣿⢿⣿⣻⢿⡽⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⣻⣞⣷⢿⣻⡾⣿⣽⢾⣻⡾⣽⣾⣿⣿⣿⣿⣿⣯⢿⡷⣟⣯⡿⣽⢿⣽⣻⢯⣟⡿⣽⣻⢯⣟⣷⢯⣟⡷⣿⣻⡽⣟⣯⣟⣯⣟⣯⣿⣽⢾⣳⡿⣞⣿⡽⣯⣿⣽⣻⣽⣷⣻⣞⣷⣻⣞⣷⢯⣟⣿⡽⣟⣾⡽⣟⣿⣿⣿⣿⣿⡗⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⣳⣯⣟⣯⡿⣽⡷⣯⡿⣯⣟⡿⣾⣿⣿⣿⣿⣿⣯⢿⣽⣟⡷⣿⣻⣟⣾⣻⢯⣟⣿⡽⣯⣿⣻⢾⣟⣯⢿⣷⣻⣽⢿⣽⢾⣻⣾⣻⢾⣽⣻⢯⣟⣯⣷⢿⣻⣞⡷⣟⣷⢯⣷⢿⣽⣳⡿⣾⣻⣟⣾⣻⢯⡿⣽⣟⣾⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⣳⢿⣞⣯⡿⣷⣟⣯⢿⣷⣻⣟⣿⣿⣿⣿⣿⣿⡽⣿⢾⣽⣻⢷⣯⢿⣞⡿⣯⢿⣞⣿⣳⣯⣟⡿⣞⣯⣿⢾⡽⣯⡿⣾⣻⢷⣯⣟⣯⣷⢿⣻⡽⣷⢯⣿⣻⢾⣟⡿⣾⣻⡽⣟⣾⢯⣟⣷⢿⡾⣽⢯⣿⣻⣽⡾⣯⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⡽⣯⣟⡷⣿⣳⣯⢿⣻⡾⣷⢯⣿⣿⣿⣿⣿⣿⡿⣽⣯⡷⣿⢯⣟⣯⡿⣽⣻⣯⢿⡾⣽⣳⡿⣽⢿⣽⢾⣻⣟⡷⣿⡽⣯⣿⢾⣽⣳⣯⢿⣯⣟⣯⣿⣳⢿⣻⡾⣟⣷⢿⣽⢿⣽⣻⣽⡾⣿⣽⣻⣯⡷⣟⡷⣿⣽⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⡽⣟⣾⢿⡽⣷⣻⢿⣽⣻⣽⣟⣿⣿⣿⣿⣿⣿⣟⣷⢯⣿⣽⣻⢯⣷⢿⣻⢷⣻⣯⣟⣿⣳⢿⣯⢿⣾⣻⣟⡾⣟⣷⢿⣻⢾⣯⣟⣷⣻⣟⣾⣽⣳⣯⣟⣿⣳⡿⣯⣟⡿⣾⢯⣷⣟⡷⣿⣳⣯⡷⣿⣽⣻⣽⡷⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⣽⣻⣽⣯⢿⣯⣟⣯⣷⣟⡷⣯⣿⣿⣿⣿⣿⣿⣻⢾⣟⡷⣯⣟⡿⣽⣻⢯⣿⣻⢾⣽⣾⣻⣟⣾⣟⡷⣟⣾⣟⣯⣟⣯⣿⣻⢾⣽⣾⣻⢾⣽⡾⣯⡷⣿⢾⣽⣻⢷⣻⣽⣯⢿⣳⣯⢿⣷⣻⢷⣻⡷⣯⣟⣾⣽⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⢾⣽⣳⣯⣿⢾⣽⣳⡿⣞⣿⣽⣻⣿⣿⣿⣿⣿⣟⡿⣾⣻⣽⢯⣿⣻⣽⣟⣷⣻⣯⡷⣯⣷⣻⢷⣯⢿⣻⢷⣯⣟⣾⣻⢾⡽⣟⣷⢯⣟⣯⣷⢿⣳⡿⣯⣟⡷⣿⣻⢯⣷⣻⢿⣽⡾⣟⣾⢯⡿⣯⣟⣷⢿⣽⡾⣽⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⢯⣟⡷⣟⣾⢿⣽⣳⣿⣻⢷⣯⣿⣿⣿⣿⣿⣿⣯⣟⣷⢿⣽⣻⢷⣯⡷⣿⣞⡿⣾⣽⢷⣻⣽⣟⣾⣟⣯⡿⣾⣽⣳⡿⣯⢿⣻⡾⣿⣽⣻⢾⣻⣽⣻⢷⣻⣟⡷⣿⢯⣷⢿⣻⣾⡽⣿⣽⣻⣽⣷⣻⡾⣟⣾⣽⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀
//⢸⣿⣿⣿⣿⣿⣯⢿⣽⢿⣽⣻⡾⣟⣾⡽⣿⢾⣽⣿⣿⣿⣿⣿⣷⣻⡾⣿⡽⣯⣿⣞⣿⣳⡿⣽⡷⣯⣿⣻⢾⣽⡾⣽⣾⣻⢷⣯⢿⣽⣻⢿⣽⣻⢷⣯⣟⡿⣽⣳⣿⣻⣽⡾⣿⡽⣟⣾⢿⣽⣞⣿⣳⣯⣟⣾⣳⡿⣽⣻⣽⡿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
//⠸⣿⣿⣿⣿⣿⡾⣿⣽⣻⡾⣯⣟⣯⣷⢿⣯⣟⣿⣿⣿⣿⣿⣿⣷⣻⣽⢷⣟⡿⣾⣽⢾⣯⢿⣽⣻⢷⣯⣟⣯⣷⢿⣻⡾⣽⣟⣾⣟⡷⣿⢯⣷⣟⡿⣾⣽⣻⢯⣟⣾⣽⣳⣿⣳⢿⣻⡽⣟⣾⣽⢾⣻⡾⣽⣳⡿⣽⣻⣽⡿⣽⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀
//⠀⣿⣿⣿⣿⣿⣟⣷⢯⣷⢿⣯⣟⡷⣯⣿⢾⣽⣾⣿⣿⣿⣿⣿⡷⣯⣟⡿⣾⣻⢷⣯⡿⣾⣻⣽⢯⣿⢾⣽⣳⣯⣿⣳⣿⣻⢾⣳⣯⢿⣯⢿⡾⣽⣻⢷⣯⣟⡿⣽⣳⣯⣷⢯⣟⡿⣽⣻⢯⣟⣾⣟⡷⣿⣻⣽⣻⣽⣿⢯⣟⣿⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀
//⠀⣿⣿⣿⣿⣿⣟⣾⢿⣽⣻⡾⣽⣻⣽⡾⣟⣷⢯⣿⣿⣿⣿⣿⡿⣽⡾⣟⣷⢿⣯⡷⣟⣯⡿⣾⣻⣽⣯⣟⡷⣟⣾⣽⣞⣯⡿⣯⣟⡿⣾⣻⣽⢿⣽⣻⡾⣽⣻⢯⣟⣾⣽⣻⡽⣟⣯⢿⣻⣽⡾⣯⣟⣷⣟⣷⣿⣻⡾⣟⣯⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀
//⠀⢸⣿⣿⣿⣿⣿⣽⣻⡾⣯⣟⡿⣽⣳⣿⣻⢾⡿⣿⣿⣿⣿⣿⡿⣽⣻⣽⢯⣿⢾⣽⢿⣽⣻⢷⣟⣷⣻⢾⣟⡿⣽⣞⣯⣷⢿⣽⣾⣻⢷⡿⣽⣻⣞⣯⢿⣻⣽⣟⣯⣷⣻⡽⣟⣯⣿⣻⡽⣷⣻⣽⡾⣿⢾⣯⡷⣿⣽⣻⢷⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀
//⠀⢸⣿⣿⣿⣿⣿⣞⣷⢿⣯⢿⣽⢿⣽⣞⡿⣯⢿⣿⣿⣿⣿⣿⣿⣻⣽⡾⣿⣽⣻⡾⣟⣷⢿⣻⡾⣯⣟⡿⣾⣻⢯⣟⣷⣯⢿⣳⣯⣟⣯⡿⣯⣷⢿⣽⣻⣟⣾⣽⢾⣳⡿⣽⣟⡷⣯⣷⢿⣯⣟⡷⣟⣯⣿⢾⣽⡷⣯⣟⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⣿⣿⣿⣿⣿⣟⣾⣟⣾⢿⣽⣻⣾⣽⣻⣽⣟⣿⣿⣿⣿⣿⣿⣳⣯⢿⣳⣯⣷⢿⣻⡾⣿⣽⣻⢷⣻⣟⣷⢿⣻⣽⡾⣽⣻⣟⣾⡽⣷⢿⣽⣾⣻⡽⣷⢯⣷⣟⡿⣽⣻⣽⡾⣿⣽⢾⣟⣾⣽⣻⢯⣟⣾⣟⡷⣟⣯⡿⣾⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⢹⣿⣿⣿⣿⣿⢾⣽⡾⣟⣷⣟⡾⣷⣻⢷⣯⣿⣿⣿⣿⣿⣿⢷⣻⡿⣽⣳⣯⡿⣯⣟⣷⢯⣟⣿⣽⢾⣯⣟⣯⣷⢿⣻⢷⣯⢿⣽⢯⣿⣞⡷⣿⣽⣻⣯⣷⣻⢿⣽⢯⣷⢿⣳⣯⣿⢾⣻⣞⡿⣯⣟⣷⢯⣿⣻⢷⣟⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⢸⣿⣿⣿⣿⣿⣟⣾⣽⢿⡾⣽⣻⣽⢯⣿⣞⣿⣿⣿⣿⣿⣿⣟⣯⣿⣽⣻⣾⡽⣷⣻⣽⣟⡿⣾⡽⣟⣾⡽⣷⢯⣿⢯⣿⢾⡿⣽⣻⢷⣯⢿⡷⣯⣷⣟⣾⢯⣿⢾⡿⣽⣻⢯⣷⢯⣿⢯⡿⣽⣟⣾⢯⣿⣳⣿⣻⢾⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⢻⣿⣿⣿⣿⣿⣾⣯⣿⡽⣿⡽⣯⣿⣳⢿⣾⣿⣿⣿⣿⣿⣟⣾⣳⣯⣷⢯⣿⣽⣻⡾⣽⣻⢷⣟⡿⣽⣻⣽⢿⣽⣻⡾⣿⣽⣻⣽⢿⣾⣻⣽⣷⣻⢾⣯⡿⣽⣯⣟⣯⣿⣻⡽⣿⣽⣻⣽⣟⣾⢯⣿⣳⢿⡾⣽⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠈⠻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣷⣟⡷⣯⣿⣳⣯⣷⢿⣻⣽⢿⣞⣿⢯⣟⣾⣟⡷⣿⡽⣷⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣾⣿⣷⣿⣾⣿⣾⣿⣿⣿⣿⣿⣿⣟⣾⣟⡷⣿⢯⣟⡿⣾⣿⣿⣿⣿⠇⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠈⠛⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢾⣽⣻⣽⡾⣯⣷⢯⣿⣻⢾⣯⢿⣾⣻⢯⣷⣻⣽⡷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣻⢷⣯⣷⣻⣽⣯⢿⣯⣟⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠉⠉⠙⠋⠋⠉⠉⠉⠉⢹⣿⣿⣿⣿⣿⣯⡷⣟⣷⢿⣳⣯⣿⣳⡿⣯⣟⡿⣞⣯⣿⣽⣻⡾⣽⣿⣿⣿⣿⣿⡿⠿⠿⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣻⢿⣽⣳⣯⣟⡿⣞⣷⣟⡷⣯⣿⢾⣽⣿⣿⣿⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣷⣻⢿⣽⣻⢯⣷⢯⣷⣟⡿⣞⣿⣻⣽⢾⣳⡿⣽⣟⣾⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⡾⣽⣯⡷⣟⣷⣻⣽⣟⡷⣯⣿⣻⢾⣻⣽⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣷⣟⣯⣷⢿⣻⡽⣟⣷⣯⢿⣻⢷⣻⣽⣟⣯⢿⣻⡾⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⡿⣽⣞⡿⣯⢿⣽⣞⣯⣿⣽⢾⣻⢿⡽⣿⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣞⡿⣞⡿⣯⣟⣿⢾⣽⣻⢯⣿⢯⣷⢯⣟⣿⣳⡿⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⡿⣽⡾⣿⡽⣿⣞⣯⣷⣟⡾⣟⣯⣿⣻⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣯⣟⡿⣽⣯⣟⣾⢿⡽⣯⡿⣯⢿⡾⣟⡿⣾⣽⣻⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⢯⣟⣷⢿⣳⣯⣟⣾⣽⣻⢯⣟⣾⣽⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣷⣻⢿⣽⣞⣯⣟⣯⡿⣷⣟⡿⣯⣟⡿⣽⡷⣯⢿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⢯⣿⢾⣻⣯⢷⡿⣽⣾⣻⢯⣿⣽⣾⣿⣿⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⡽⣟⣾⢯⣟⣾⢯⣟⣷⣻⣽⣟⣾⣟⣯⣿⡽⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⡿⣽⣻⢷⣻⣯⢿⡷⣯⣟⣿⣳⣯⣿⣿⣿⣿⡟⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣿⣿⣟⣯⣿⢯⣿⣽⣻⣟⣾⢯⣷⣻⢷⣯⣷⣯⣿⣷⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣽⣯⣿⣻⣾⣿⣽⣟⣾⣽⣷⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣿⣿⣿⣷⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠻⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠟⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠸⠿⠿⠿⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⠿⠿⠟⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠛⠛⠛⠛⠛⠛⠛⠛⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//?.
"#
        }

        18 => {
            r#"
//.?
//        ⣠⣴⠿⠶⠶⣦⣴⡿⠿⢷⣶⠾⠶⣦⣴⡾⠶⠶⣶⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⢰⣿⠁⠀⣦⠀⠈⣿⡇⠀⠀⡇⠀⠀⣿⠁⠀⣴⡄⠀⢻⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⠀⠻⢶⣶⣿⡇⠀⠀⡇⠀⠀⣿⡀⠀⠙⠷⣶⡾⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⣀⣴⣾⣿⣷⣤⡀⠀⠙⣿⡇⠀⠀⡇⠀⠀⣿⣿⣦⣀⠀⠈⢻⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⢀⣾⠟⠁⢸⣿⠀⠀⣿⠀⠀⢸⡇⠀⢸⡇⠀⠀⣿⠀⠀⣽⡇⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⢠⣿⠃⠀⠀⠘⢿⣦⣀⡀⣀⣠⣿⣷⣄⣀⢀⣀⣴⣿⣧⣀⣈⣀⣠⣾⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⢠⣿⠃⠀⠀⠀⠀⣀⣹⣿⣿⣿⣿⣥⣬⣿⣿⣿⣿⣉⡀⠈⠙⠛⠛⣿⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⣾⡇⠀⣠⣶⡾⠿⠛⠋⠉⠉⠉⠉⠉⠉⠉⠉⠉⠉⠛⠻⣷⣄⠀⠀⢻⡇⢀⣴⣶⣶⣄⣠⣴⣶⣦⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⢠⣿⠀⣰⡟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⣷⡄⢸⣷⣾⡟⠁⠉⠛⠛⠉⠉⠹⣿⣷⣶⣦⣄⠀⠀⠀⠀⠀
//⢸⡿⢠⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⢸⣿⣿⠁⠀⠀⠀⠀⠀⠀⠀⠈⠛⠉⠙⣿⣷⣿⣷⡄⠀
//⢸⡇⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⢸⣿⣿⠀⠀⠀⢰⣿⠄⠀⢰⣶⠀⠀⢀⣀⠀⠀⢻⣿⠀
//⢸⡇⢸⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡟⢸⣿⡿⠶⣦⣄⣾⣿⡄⠀⣸⣿⠀⠀⢸⣿⡄⠀⢸⣿⡇
//⢸⡇⠀⢿⣷⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⣿⠁⢸⣿⣧⣄⠀⢉⣻⣿⡇⠀⣽⣿⠀⠀⢸⣿⡇⠀⢸⣿⠇
//⣿⡇⠀⢸⣿⢻⣿⠿⠿⠿⣿⣶⣶⣶⣦⣤⣤⣤⣤⣴⣶⣶⡿⣿⡇⠀⠀⣿⣿⣿⣿⣿⣿⣿⣃⣀⣿⣿⠀⠀⣼⣿⡇⣀⣾⡿⠀
//⣿⡇⠀⠀⠻⣦⣨⡀⠒⠚⠹⠿⠷⠚⠙⠋⠉⠿⠹⠿⠶⢛⣶⡟⠀⢀⣾⣿⢿⣿⠙⣿⡿⠿⠿⢿⣿⡿⠿⠿⠿⠛⠛⠛⠋⠀⠀
//⣿⡇⠀⠀⠀⠀⠉⠉⠛⠒⠒⠦⠄⠤⠤⠤⠤⠤⠶⠖⠚⠉⠁⠀⠀⠀⠻⣿⣿⣿⣲⠏⠀⠀⠀⢀⣹⣷⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⣿⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⡟⠻⣿⣦⣤⣶⡾⠟⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⣿⣧⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⡇⠀⠀⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⣿⡏⠈⠳⢦⡤⣤⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⠤⢤⡤⠤⠤⢤⣶⠦⣺⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀      
//?.
"#
        }

        19 => {
            r#"
//.?
//          ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣤⣤⣤⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣶⡿⠛⠋⠉⠉⠉⠉⠉⡿⠛⠻⠷⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣾⠟⠉⠀⠙⣦⣀⣀⣀⣠⡤⠴⡿⣄⡀⠀⠀⠉⠻⢷⣤⡀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⡟⠁⠀⠀⠀⣰⠋⢧⠀⠀⠀⠀⠀⡇⠀⠉⠙⠓⠒⡶⢯⣙⣿⣆⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⡟⠀⠀⠀⢀⠞⠁⠀⠈⣳⡤⠤⠴⠚⣟⠛⠒⠒⠒⣺⠳⢤⣀⣉⣻⣷⡀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡿⠶⠶⣤⣾⡁⠀⠀⢀⡜⠉⣧⣠⣤⣴⣾⣶⠶⠶⠶⠷⣶⣶⣶⣬⣭⣙⣷⡀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⠁⠀⠀⣿⠀⠙⢲⣞⠁⣠⡾⠟⠉⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠻⢷⣄⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡏⠀⠀⠀⡇⠀⠀⢸⠏⣿⡏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢷⡄⠀
//⠀⠀⠀⢀⣠⣴⣶⣶⣦⣾⠃⠀⠀⢠⡇⠀⠀⣸⠀⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣿⡄
//⠀⠀⣠⡿⠿⡄⠀⠀⠈⣿⡀⠀⠀⡼⠀⠀⣴⣃⣤⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇
//⠀⣰⡿⠁⠀⠹⡄⠀⠀⣿⠿⣶⣴⡷⠒⠋⠻⡄⠀⢹⣧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣿⠃
//⢀⣿⠁⠀⠀⠀⢹⣀⣴⡏⠀⠀⠙⢿⣦⠀⠀⢹⡄⠀⠻⣧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣠⣿⠋⠀
//⢸⡿⢧⠀⠀⢀⡼⠯⣼⡇⠀⠀⠀⠀⠙⣷⡄⠀⣇⡤⠞⠉⠻⢷⣤⣄⣀⣀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣤⣶⣿⣿⣿⠀⠀
//⣿⡇⠈⢧⣠⠎⠀⠀⢸⡇⠀⠀⠀⠀⠀⠘⣿⡞⠛⠢⣄⠀⣠⠏⠈⠉⡿⠛⠛⠛⢻⠛⠛⠛⠛⢿⠉⠁⣴⠟⠁⣿⠀⠀
//⣿⠃⠀⡼⠧⣄⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠘⣷⡀⠀⠘⣶⣁⡀⠀⡼⠁⢀⡀⠀⠘⡇⣀⣠⣤⣬⣷⣾⠏⠀⠀⣿⠀⠀
//⣿⣀⡞⠁⠀⠈⢣⡀⢸⡇⠀⠀⠀⠀⠀⠀⠀⢹⣇⠀⡼⠁⠀⠉⣹⠛⠉⠉⡉⠉⢙⣏⠁⠀⠀⠀⣼⡏⠀⠀⠀⣿⠀⠀
//⣿⡿⣄⠀⠀⠀⠀⢳⣼⡇⠀⠀⠀⠀⠀⠀⠀⠈⣿⡾⠁⠀⠀⢀⡇⢠⠂⣜⣠⣤⠸⡟⢣⠀⠀⢰⡿⠀⠀⠀⠀⣿⠀⠀
//⣿⡇⠈⠳⡄⠀⠀⣨⢿⡇⠀⠀⠀⠀⠀⠀⠀⠀⣿⡗⠒⠲⢤⣸⠀⣸⣄⣿⣿⣿⣷⣿⣞⣠⣤⣿⠇⠀⠀⠀⠀⣿⠀⠀
//⢸⣇⠀⠀⢹⡀⡰⠃⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⢸⡇⠀⠀⠀⣹⢉⡽⣿⢿⣿⣿⣿⣿⣅⠀⠀⣿⠀⠀⠀⠀⢀⣿⠀⠀
//⠘⣿⡀⠀⠈⡿⠁⠀⢸⣷⣦⣤⣤⣄⣀⡀⠀⠀⢸⡇⠀⠀⠀⡟⠘⡅⢇⢸⣿⣿⠇⡇⡸⠀⠀⣿⠀⢀⣀⣠⣼⣿⠀⠀
//⠀⢻⣇⠀⣰⠛⠒⠦⣼⡇⠀⠀⠉⠉⠙⢻⣷⣦⣼⡏⠉⠓⠦⣿⠤⠵⠾⠾⠿⢿⣸⣯⠧⠖⠚⣿⡾⠟⠋⠉⣹⡇⠀⠀
//⠀⠈⢿⣶⠇⠀⠀⠀⢸⣿⣶⣤⣤⣤⣀⣼⣀⣈⣙⣃⡀⠀⠀⢹⡀⠀⠀⢀⣀⣀⣸⣁⣀⣀⣤⣤⣤⣶⠶⠿⣿⡇⠀⠀
//⠀⠀⠈⠻⣷⣄⠀⠀⢘⣧⠀⠀⠉⠉⠉⠙⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⠛⢉⡉⠉⠉⠀⠀⠀⢀⣿⠁⠀⠀
//⠀⠀⠀⠀⠈⠙⠛⠿⠻⣿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡷⠶⠶⠶⢶⡶⠿⠿⠿⠛⠋⠀⠀⢀⣀⣤⣾⡿⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⣤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣸⡇⠀⠀⠀⢸⣧⣤⣤⣤⣶⣶⠶⠿⠛⠋⠁⣼⡇⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢿⡍⠙⠛⢿⠿⠷⠶⠶⠾⠿⠿⠟⢻⡇⠀⠀⠀⢸⡏⠉⠁⠀⣀⣀⣀⣀⣄⣀⣀⣿⠁⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡟⠲⢦⣼⣀⣀⣀⣤⣤⣀⣀⡀⢸⡇⠀⠀⠀⢸⣷⠖⠚⠉⠉⠀⠀⠀⠀⠀⣸⡏⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⣿⠀⠀⡏⠁⠀⠀⠀⠀⠀⠈⠉⣿⠇⠀⠀⠀⠀⢿⣆⠀⠀⠀⠀⠀⠀⠀⣠⡿⠁⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⣧⣀⡇⠀⠀⠀⠀⠀⢀⣠⣾⠟⠀⠀⠀⠀⠀⠈⠻⢷⣶⣶⣶⣶⡶⠿⠛⠁⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠛⠿⠿⠿⠿⠿⠛⠋⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀      
//?.
"#
        }

        20 => {
            r#"
//.?
//⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜
//🟥🟥🟥🟥🟥⬛⬜⬜⬜⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜
//🟥🟥🟥🟥🟥🟥⬛⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜⬜⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬜⬜⬜⬜⬜⬜⬜
//🟥🟥🟥🟥🟥🟥🟥🟥⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬛⬛
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛🟨🟨⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛🟨🟨⬛⬛⬛⬛🟥🟥🟥⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟨⬛🟨⬛🟦🟦🟦🟦⬛🟥🟥🟥⬛⬛🟥🟥🟥🟥⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟨⬛🟨🟨⬛⬛⬛⬛🟥🟥🟥🟥🟥⬛🔪🟥⬛⬛🟧🟧🟧⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟨⬛🟨🟨🟨🟨🟨⬛🟥🟥🟥🟥🟥🔪🔪🔪🟧⬛🟧🟧⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟨⬛🟨🟨🟨🟨🟨⬛🟥🟥🟥🟥🟥🟥🔪⬛🟧⬛🟧⬛🟦🟦🟦⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛🟨🟨🟨🟨🟨⬛🟥🟥🟥🟥🟥⬛🟧🟧⬛🟧🟧🟧⬛🟦🟦⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟨⬛⬛⬛🟨⬛🟥🟥🟥🟥🟥⬛⬛⬛🟧🟧🟧🟧🟧⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛🟥⬛⬛⬛🟥🟥🟥🟥🟥🟥⬛🟧🟧🟧🟧🟧⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛🟧⬛⬛⬛🟧⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥
//🟥🟥🟥🟥🟥⬛⬛⬛⬛⬛⬛⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛🟥⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬛⬛⬛
//🟥🟥⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥🟥⬛⬜⬜⬜⬜
//⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬛⬛🟥🟥🟥⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬛⬜⬜⬜⬜⬜
//⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬛⬛⬛⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜⬜      
//?.
"#
        }

        21 => {
            r#"
//.?
//           ⠀⣀⡴⠒⣛⣉⣉⣉⣹⣷⠄⠀⠀⠀⣴⠒⢦⠀⠀⠀⠀⣴⡟⣶⠀⠀⠀⢀⣤⠖⣞⣋⣉⣉⣉⣿⡶⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠸⡿⠀⣟⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⢸⠀⠀⠀⠀⣿⡇⢻⠀⠀⠀⣿⡃⢾⡉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⢦⣈⡛⠒⠦⠤⣄⣀⠀⠀⠀⠀⣿⠀⣼⠀⠀⠀⠀⢹⡇⢸⠀⠀⠀⠉⠳⣄⣙⠓⠲⠤⢤⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠙⠒⢤⠉⢧⠀⠀⠀⣿⠀⢷⠀⠀⠀⠀⣸⠇⣸⠀⠀⠀⠀⠀⠀⠀⠉⠉⠓⠢⡄⠙⡄⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣠⡤⢤⣤⣤⣤⣤⣟⣁⡿⠀⠀⠀⠙⢧⡈⠳⠤⠤⠶⣋⣰⠏⠀⠀⠀⢀⣤⠤⣤⣤⣤⣤⠴⢋⣸⠇⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢙⣶⠞⠋⠉⠁⠀⠈⠉⠙⠲⣄⠀⠀⠀⠉⠙⠒⠒⠛⠉⠀⠀⠀⠀⢀⡼⠟⠉⠉⠀⠀⠈⠉⠛⠦⣄⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢧⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣰⠏⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠳⡄⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⡤⠖⠚⠉⠳⡄⠀⠀⠀⠀⠀⠀⣠⣴⣇⣀⡤⠴⠒⠛⠓⢦⡀⠀⠀⠀⠀⠀⢹⡄⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢰⠃⠀⠀⠀⠀⠀⠀⢀⣠⠖⠋⠁⠀⠀⠀⠀⠀⠸⡄⠀⠀⠀⢀⡾⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠹⡄⠀⠀⠀⠀⠈⢧⠀⠀⠀⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⢀⣠⣿⠀⠀⠀⠀⠀⠀⢠⡾⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⠀⠀⠀⢻⡁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⠀⢸⢦⣀⠀⠀⠀
//⠀⠀⢀⣴⠆⠀⣰⠋⢀⣷⠀⠀⠀⠀⠀⠀⠘⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣿⠀⠀⠀⠈⢷⡀⠀⣀⣀⣀⠀⠀⠀⠀⢀⣼⠃⠀⠀⠀⠀⠀⠘⡇⠈⢳⡀⠀
//⠀⢠⡟⢸⠀⣰⠇⠀⠈⡏⠀⠀⠀⠀⠀⠀⠀⢻⣀⢀⣀⣀⣀⣀⣤⠤⠤⣾⠋⠀⠀⣄⡀⢠⡏⠉⠁⠀⠉⠉⠉⠓⠒⠉⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢧⠀
//⠀⢸⡇⢸⠀⣿⠀⠀⢰⡇⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠀⠀⠀⠀⠀⠀⠀⣻⠀⠀⠀⢿⣍⠙⣲⣤⠤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢸⠀
//⢀⣼⣇⣸⡀⣿⠀⠀⠸⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⡀⠀⠀⠀⠈⣿⡟⢹⡶⢀⠈⠙⢦⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⢸⠀
//⣼⣿⣹⡏⢻⣿⠀⠀⠀⣇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⠀⡏⠉⠛⢧⣿⡖⠒⠚⠃⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠃⠀⠀⢸⠀
//⢻⣟⢒⣆⢸⣿⠀⠀⠀⢿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡇⠀⠀⠀⢸⡇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣼⠀⠀⠀⢸⠀
//⠻⠿⠿⠟⢻⣄⣀⣀⣼⣄⣄⣄⣄⣄⣄⣄⣀⣀⣀⣀⣤⣀⣀⣀⣀⣀⣠⣿⣤⣀⣀⣾⣧⣀⣀⣀⣀⣀⣀⣀⣀⣀⣀⣠⣀⣀⣀⣀⣀⣀⣿⣆⣀⣐⣾⠃     
//?.
"#
        }

        // awwwwwwww!! ඞ
        22 => {
            r#"
//.?
//        ⣤⡴⠾⠷⠾⠷⠿⠾⠷⠿⠶⢷⣤⣤⣀⣀⣀⣀⣀⣤⣠⣀⢀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
//⠀⠀⠀⣀⡤⠖⠒⡛⣉⠩⢁⠢⡑⢂⠲⡐⠢⢆⡱⢌⡜⢠⢃⡜⡩⡉⢍⠩⡉⢍⡩⢻⠛⣛⠳⠶⣄⠀⠀⠀⠄⠀⠀⠀⠀⠀
//⢀⠒⡌⢡⠒⡨⢑⠰⠠⢃⠅⢣⠘⡄⢣⠘⡡⢊⡔⣢⢌⢣⠎⡴⣡⠝⣢⢣⡙⢦⡑⣣⠹⣄⠫⡜⡹⢷⣄⠀⠀⠀⠀⠀⠀⠀
//⢈⠒⢌⠢⠘⡄⠣⢌⠱⡈⠜⡠⢃⠜⣠⢋⡴⢃⢮⡑⣎⢧⡛⣴⣃⡟⣦⢳⣚⡵⣪⣕⣳⡞⣷⡼⣑⠦⣍⢷⣄⠀⠀⠀⠀⠀
//⠤⢉⠢⢌⠱⣀⠣⠌⢢⠑⣌⡑⢎⠼⣠⢳⡸⣍⢶⡹⣜⣶⣻⣵⣯⣻⣵⣯⢯⣷⣝⣮⢷⣿⣽⣻⣧⡛⡬⢎⡽⣆⡀⠀⠀⠀
//⢄⢃⠒⡌⠒⢤⢂⡍⢢⡙⢤⡙⡌⢮⡱⢆⠿⣽⣮⣷⢫⣶⣿⣿⣞⣷⣿⣿⣿⣿⣿⣾⣿⣿⣿⣧⣿⣹⢳⣛⣶⣹⢷⡀⠀⠀
//⠌⢦⠱⣈⠝⡤⢣⠜⣢⡙⡤⡓⠼⣑⢮⡙⢮⡝⣻⢿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⢷⣣⢏⣷⣻⣄⠀
//⣋⢆⠳⣌⠚⣔⢣⠛⣤⡙⡲⢩⢳⣉⠶⣩⠳⣜⡱⢎⡜⣙⢫⡙⡍⢎⡱⣉⢎⡱⢌⠦⡑⢦⠱⡌⢦⢡⢛⣿⣿⣮⢷⣩⣿⡀
//⡍⢮⠱⣌⡹⢤⡋⡽⢰⣍⠳⣍⠳⣜⡸⢣⣛⢬⠳⣭⡜⢦⣣⢼⡸⢥⢣⣍⢶⣩⢎⢧⡙⣎⢳⣙⣎⡳⢎⢶⣿⣟⣯⣾⠟⠁
//⢮⡱⢣⢖⡱⢦⡙⣖⢣⢎⡳⣜⡹⢦⡝⢣⢞⡣⣟⣶⡹⣇⡞⣦⡝⣮⢷⣾⢿⣳⢏⣾⡱⣽⣚⣶⣭⢿⣽⣾⠿⠾⣿⣿⣦⡄
//⢧⣙⢧⣎⠵⣎⡵⢎⡳⣎⠵⣎⡵⣶⢻⡿⣾⢿⣿⢧⡿⣼⡽⣶⢻⣯⣿⣟⣯⢷⣻⣾⣽⣳⢯⣷⣿⠿⢋⡁⢆⠡⢹⣿⣿⣧
//⣧⡻⣖⢮⣻⡜⢾⣩⢗⣮⢟⡼⣟⣿⣯⣿⣿⣿⢿⣻⣿⣿⣻⣽⣿⣿⣷⣿⣿⣿⣿⡟⠟⡛⢋⠍⣄⠢⣡⢘⣄⣣⣼⣿⣿⣿
//⣷⢫⡽⢧⣳⡽⢧⣻⢞⡽⣾⣽⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣯⣟⡾⣽⣻⢿⡿⣿⢿⣻⢿⣻⢿⣻⣟⣯⣿⣿⣿
//⣯⣷⣻⢯⣗⡿⣯⣷⣯⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡟⠋⠁⠀⠘⣿⣿⣿⣿⣿⣳⣯⢿⡽⣯⢿⡽⣯⣟⣯⣷⣿⣿⣿⣿⠓
//⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⢟⡻⢯⣿⣿⣿⣓⢾⡇⠀⠐⠠⠀⠙⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⣿⣿⡿⠁⠀
//⣿⣿⠿⠻⠛⠟⠋⠩⣿⣿⣿⣏⠮⣕⢯⣿⣿⣿⡭⢞⣷⠀⠀⢀⠁⠀⡀⠀⠉⠛⠻⠿⠿⠿⠛⠛⠩⠙⠁⠁⠀⣿⣿⣿⠀⠀
//⠋⠁⠀⢸⠙⡆⠀⠰⣿⣿⣿⡏⣞⡱⣞⣿⣿⣿⡝⢮⣿⡆⠀⠀⠠⠀⠀⠀⠂⢀⠀⠀⠀⠀⢀⠀⠄⠀⠀⠁⢠⣿⣿⣿⣦⠀
//⠀⠀⡜⢫⡀⣿⢧⢘⣿⣿⣿⢳⠼⣱⣹⣿⣿⣿⡝⢦⢻⣷⠀⠈⠀⡀⠈⠀⠀⡀⠀⠀⠂⠀⠀⠀⠀⢀⠈⠀⢰⣿⣿⣿⣿⠀
//⠀⠀⠙⠋⠁⠈⠁⢈⣿⣿⣿⡏⣞⡱⢞⣿⣿⣿⡝⣎⢧⢻⣧⠀⠀⠠⠀⠄⠂⠀⠀⠄⠀⠂⠀⠁⠄⠠⠀⠠⣿⣿⣿⣿⣿⠀
//⠀⠀⠀⠀⠀⠀⠀⢈⣿⣿⣿⡷⣸⢱⣫⣿⣿⣿⡽⡸⢎⢧⢻⣦⣀⠀⠀⠀⠀⠈⠀⠀⠀⠐⠈⠀⠀⠀⣠⣽⠿⣿⣿⣿⠁⠀
//⠀⠀⠀⠀⠀⠀⠀⠨⣿⣿⣿⡷⣡⠧⣝⣿⣿⣿⡷⣩⢻⢬⡓⣎⢟⡷⣾⣶⣶⣤⣆⣤⣠⣄⣤⣦⣶⡿⢻⡱⣛⣿⣿⣟⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⣥⣛⢼⣻⣿⣿⣗⡣⣏⢶⡹⣚⡼⣜⡱⣎⡼⣩⢏⡽⣩⢏⢯⡙⡦⣝⢣⢷⣻⣿⣿⡯⠀⠀
//⠀⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣿⣿⣿⣿⣿⣿⣧⠽⣸⠖⣭⢳⠼⣸⣽⣿⣷⣯⣾⣶⣷⣾⣮⣽⣷⣯⡝⢮⣿⣿⣿⡇⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠿⠻⠟⢿⣿⣿⣟⠮⡕⣏⢮⠳⣍⣳⣿⣿⣿⡿⢿⣿⣿⣿⣿⠿⣏⠳⣜⢯⣿⣿⣿⠃⠀⠀
//⠀ ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣿⣿⣿⡹⣜⢣⠯⣝⢲⣹⣿⣿⣿⠀⠀⢿⣿⣿⣧⣛⣬⡛⣼⣻⣿⣿⣿⠀⠀⠀      
//?.
"#
        }

        23 => {
            r#"
//.?
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣤⣤⣤⣤⣤⣄⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⣴⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⡀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣦⡀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠿⠿⠛⠛⠛⠛⠿⠿⣿⣿⣷⣄⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠻⣿⣷⠀⠀
// ⠀⠀⢀⣠⣤⣴⣶⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣇⠀
// ⠀⢀⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣶⣤⣤⣤⣤⣤⣤⣤⣤⣴⣶⣿⣿⡿⠀
// ⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀
// ⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠁⠀⠀
// ⠀⣸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀
// ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀
// ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀
// ⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀
// ⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀
// ⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀
// ⠀⠀⢿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡿⠀⠀⠀⠀
// ⠀⠀⠀⠙⠿⠿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⠿⠿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⡄⠀⣿⣿⣿⣿⣿⣿⣿⣿⣿⡇⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢸⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⢐⣿⣿⣿⣿⣿⣿⣿⣿⣿⠃⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣾⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢻⣿⣿⣿⡿⣟⣯⣿⠟⡉⠉⣿⣿⣿⣿⣿⣿⣿⣿⣿⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠻⢿⣽⣿⣿⣿⠿⠿⠟⠒⠉⠉⠉⠉⠉⠉⠉⠙⠋⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠿⠋⠉⢀⣠⣤⣤⡔⣄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣴⠾⠛⠋⠉⠀⢀⣀⠐⣤⣶⣶⡤⢤⣤⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣤⣰⣶⣾⣿⣿⣿⣆⠀⣀⣀⡀⣀⡀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠀⢀⢀⣀⠀⣀⣈⡿⠿⠿⠽⠃⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠛⠿⠿⠿⠿⠾⠟⢁⣀⡴⣦⠆⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢦⣤⣀⣀⠀⠀⠀⠀⢘⣿⣍⡷⠆⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢶⣄⠈⠉⠛⠛⠿⠓⠀⠉⠋⠉⣀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣧⡀⠙⠻⢶⣶⡤⠀⠀⠛⠶⠾⠼⠋⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⣆⠈⠻⣶⣤⡀⠀⠀⢸⠿⣶⣦⣤⣠⣾⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠙⢷⣤⣀⠈⠁⠀⠀⢠⣤⣀⠈⠉⠈⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡌⢧⣀⠉⠛⠃⠀⠀⠀⠀⠉⠛⠿⠿⠻⠃⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠰⢳⣄⠙⠛⢋⠁⠀⠀⠀⠘⠿⣴⣤⣄⣤⡄⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠘⣄⡙⠛⠋⠀⠀⠀⠀⠀⠰⣤⣀⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢀⢠⡈⠉⠉⠀⠀⠀⠀⠀⠀⢀⡈⠙⠛⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⢦⡉⠛⡁⠀⠀⠀⠀⠀⠀⠈⠻⠷⣶⣦⡆⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢠⡈⢷⣌⠙⠛⠁⠀⠀⠀⠀⠀⠀⠰⣦⣄⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠈⢷⣄⡉⠛⠛⠀⠀⠀⠀⠀⠀⠀⢀⠈⠙⠛⠛⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢦⣀⠉⠛⠷⠖⠀⠀⠀⠀⠀⠀⠀⠘⠿⣶⣦⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⣠⣀⠙⠳⠶⠶⠀⠀⠀⠀⠀⠀⠀⠀⢠⣀⣀⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠙⠻⢿⣶⣤⣤⠀⠀⠀⠀⠀⠀⠀⢠⠛⠛⠻⠿⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠰⣦⣄⠈⠉⠋⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⢹⣿⣿⣶⡆⠀⠀⠀⠀⠀⠀⠀⠺⠿⠿⠿⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠙⠻⠟⠁⠀⠀⠀⠀⠀⠀⢀⣤⣤⣤⣤⡄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⣀⣀⣀⣀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠛⠛⠻⠿⠿⠧⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⣞⣻⣿⣿⣔⣿⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀
// ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠛⠋⠉⠉⠁⠀⠀⠀⠀⠀⠀⠀      
//?.
"#
        }

        _ => {
            r#"/*    
            ┼┼║┼┼ No case......
            */"#
        }
    };

    for i in imposter.chars() {
        let mut buf = [0; 5];

        let x = i.encode_utf8(&mut buf);

        for i in x.as_bytes() {
            new_data.push(*i);
        }
    }
}
